Write an interpreter in C, C++ or Java for a very simple pseudo-code. The instructions on a one-accumulator virtual machine are as follows:

Format   Meaning

1XXX      Load accumulator with contents of XXX
2XXX       Store accumulator into location XXX
3XXX        Add contents of XXX to accumulator
4XXX         Subtract contents of XXX from accumulator
5XXX          Branch to instruction XXX if accumulator is positive
6XXX           Stop

The format of a pseudo-code program is as follows:

Initial Data Values
9999
Pseudo code program consists of the above instructions
9999

The memory of our virtual machine is 2000 words where each word can hold an integer less than or equal to +9999. The first half of the memory is used for data and the second half is for program instructions. The initial data values should be read into the beginning of the data area of the memory in that order. The validity of the values in the memory should always be checked. The pseudo code instructions should be read into the program instruction area of the memory before the program execution starts.

You will have to implement your program on our Unix system on empress.csusm.edu. You are supposed to prepare a pseudo code test program as the input to your pseudo-code interpreter. The output of your interpreter has to demonstrate that at least one instruction of each format in your test program is executed for at least once and both possibilities of the branch instruction are tested. A shell script of Unix commands that compiles and runs your program should also be prepared. The files of source program, input, output, and shell script must be submitted.

The documentation, implementation and testing of your program should be done according to the Standards of Programming Assignments.

A sample input file (PseudoCodeTestProgram) to your program is as follows:
1
2
3
4
5
9999
1000
2001
3004
4001
5003
6000
9999

A sample shell script consisting Unix commands is as follows:
gcc â€“o interpreter.out interpreter.c
interpreter.out < PseudoCodeTestProgram > OutputDisplay

Its sample output file (OutputDisplay) could have the following content:
ACC = 0    PC = 0 Next Instruction = 1000
Initialized Memory = 0:1, 1:2, 2:3, 3:4, 4:5
ACC = 1     PC = 1 Next Instruction = 2001
Initialized Memory = 0:1, 1:2, 2:3, 3:4, 4:5
ACC = 1     PC = 2 Next Instruction = 3004
Initialized Memory = 0:1, 1:1, 2:3, 3:4, 4:5
ACC = 6     PC = 3 Next Instruction = 4001
Initialized Memory = 0:1, 1:1, 2:3, 3:4, 4:5
ACC = 5     PC = 4 Next Instruction = 5003
Initialized Memory = 0:1, 1:1, 2:3, 3:4, 4:5
ACC = 5     PC = 3 Next Instruction = 4001
Initialized Memory = 0:1, 1:1, 2:3, 3:4, 4:5
ACC = 4     PC = 4 Next Instruction = 5003
Initialized Memory = 0:1, 1:1, 2:3, 3:4, 4:5
ACC = 4     PC = 3 Next Instruction = 4001
Initialized Memory = 0:1, 1:1, 2:3, 3:4, 4:5
ACC = 3     PC = 4 Next Instruction = 5003
Initialized Memory = 0:1, 1:1, 2:3, 3:4, 4:5
