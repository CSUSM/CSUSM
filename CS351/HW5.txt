HW5
===

Author: Mathias LANG

p. 343, 8
---------

Q: Describe a situation in which the add operator in a programming language would not be associative.

R: In floating point arithmetic, there is a lost of precision. Hence it is considered that (A + B) != (B + A) for some values of A and B, if they are floating-point values.

p. 345, 20
----------

Q: What is the value of x after the assignment statement in main, assuming
a. operands are evaluated left to right.
b. operands are evaluated right to left.

R:
a) 7
b) 12


p. 382, 9
---------

Q: What are the arguments both for and against the exclusive use of Boolean
        expressions in the control statements in Java (as opposed to also
        allowing arithmetic expressions, as in C++)?

Boolean expression solve some coercitions problems.
For example, the C++ expression "a < b < c" is misleading, as it will issue a value (0 or 1) for a < b, then compare it to 'c'.
Such errors are catched by boolean expression.
However it will hurt writability sometimes.
For example, 'if (pointer)', or 'if (5 + 8)' will fail, we will need to compare it to nullptr or 0. 


p. 383, 3: a. Fortran 95, b. Ada, c. C
--------------------------------------

Q: Rewrite the following code segment using a multiple-selection statement
in the following languages:
   [...]
a. Fortran 95 (youâ€™ll probably need to look this one up)
b. Ada
c. C, C++, Java, or C#

R:
a)
select case (k)
  case (1)
     j = 2 * k - 1;
  case (2)
     j = 2 * k - 1;
  case (3)
     j = 3 * k + 1;
  case (4)
     j = 4 * k - 1;
  case (5)
     j = 3 * k + 1;
  case (6)
     j = k - 2;
  case (7)
     j = k - 2;
  case (8)
     j = k - 2;
end select

b)
case k is
  when 1 => j = 2 * k - 1;
  when 2 => j = 2 * k - 1;
  when 3 => j = 3 * k + 1;
  when 4 => j = 4 * k - 1;
  when 5 => j = 3 * k + 1;
  when 6 => j = k - 2;
  when 7 => j = k - 2;
  when 8 => j = k - 2;
  when others => j = j;  
end case;
c)
switch (k) {
case 1:
case 2:
     j = 2 * k - 1;
     break;
case 3:
case 5:
     j = 3 * k + 1;
     break;
case 4:
     j = 4 * k - 1;
     break;
case 6:
case 7:
case 8:
     j = k - 2;
}
